{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Statue Your pathway to a clean codebase. What's Statue ? Statue is an orchestration tool for static code analysis. It combines the overall power of several linters and formatters into one consistent tool that prevents unwanted conflicts. With Statue you can integrate tools such as Mypy , Pylint , Black , Isort and many others. What Do You Mean by \"Orchestration\"? When running multiple formatters and linters (commands, in general), sometimes they interfere with each other and cause clashes. On other occasions, in order to solve an issue with one linter you have to introduce another issue in a different linter. Statue solves this problem (and many other problems, as we'll describe later) by keeping all your linters and formatters configuration in one file, which is fully editable via command line. In that way, you won't need to edit huge configuration files in order to keep your commands in check. Moreover, With Statue you can define different arguments for your commands to use on each file and directory in your codebase. This allows you to customize different style conventions for different files and directories, making your work with static code analysis tools more robust and user-friendly. This can be very handy when you have large codebase that you want to migrate to a given style one step at a time. Why Statue ? Statue helps you to improve your code using these powerful features: Run several formatters and linters asynchronously for faster evaluations Run commands with different arguments on each file and directory using contexts Avoid editing tedious configuration files by using the statue config command Keeping results history in order to re-run failing and non-failing static code analysis tools with only few keystrokes Saving your configuration as template in order for reuse in other project Provide clear and concise exportable evaluation reports of all your formatters and linters Can't I just keep all my configurations in setup.cfg or pyproject.toml ? Most of the formatters and linters allow you to save their configurations in setup.cfg or pyproject.toml . While this solution does help keep all your configuration in one place, it doesn't allow you to specify different configurations for different files and directories. While Statue does introduce an additional configuration file ( statue.toml ), this configuration file is totally editable via command line using the statue config methods. How does Statue differ from pre-commit ? pre-commit has been for a long time the go-to tool for running linters and formatters on your codebase, and it is provided with predefined hooks for most state-of-the-art tools. While we surely recommend on using pre-commit , here are few reasons why you might want to consider also using Statue : If you don't need each and every commit to pass your linters If you want to use a linters and formatters that doesn't have .pre-commit-hooks.yaml file If you use a lot of linters and formatters which cause your git commit to hang for long periods of time If you want to run your linters and formatters with different arguments on different files and directories If you need clear and concise reports of your linters evaluations What's next? Go on to the quick start tutorial in order to begin using Statue in a few short steps Learn a few tips how to use statue run efficiently","title":"Home"},{"location":"#welcome-to-statue","text":"Your pathway to a clean codebase.","title":"Welcome to Statue"},{"location":"#whats-statue","text":"Statue is an orchestration tool for static code analysis. It combines the overall power of several linters and formatters into one consistent tool that prevents unwanted conflicts. With Statue you can integrate tools such as Mypy , Pylint , Black , Isort and many others.","title":"What's Statue?"},{"location":"#what-do-you-mean-by-orchestration","text":"When running multiple formatters and linters (commands, in general), sometimes they interfere with each other and cause clashes. On other occasions, in order to solve an issue with one linter you have to introduce another issue in a different linter. Statue solves this problem (and many other problems, as we'll describe later) by keeping all your linters and formatters configuration in one file, which is fully editable via command line. In that way, you won't need to edit huge configuration files in order to keep your commands in check. Moreover, With Statue you can define different arguments for your commands to use on each file and directory in your codebase. This allows you to customize different style conventions for different files and directories, making your work with static code analysis tools more robust and user-friendly. This can be very handy when you have large codebase that you want to migrate to a given style one step at a time.","title":"What Do You Mean by \"Orchestration\"?"},{"location":"#why-statue","text":"Statue helps you to improve your code using these powerful features: Run several formatters and linters asynchronously for faster evaluations Run commands with different arguments on each file and directory using contexts Avoid editing tedious configuration files by using the statue config command Keeping results history in order to re-run failing and non-failing static code analysis tools with only few keystrokes Saving your configuration as template in order for reuse in other project Provide clear and concise exportable evaluation reports of all your formatters and linters","title":"Why Statue?"},{"location":"#cant-i-just-keep-all-my-configurations-in-setupcfg-or-pyprojecttoml","text":"Most of the formatters and linters allow you to save their configurations in setup.cfg or pyproject.toml . While this solution does help keep all your configuration in one place, it doesn't allow you to specify different configurations for different files and directories. While Statue does introduce an additional configuration file ( statue.toml ), this configuration file is totally editable via command line using the statue config methods.","title":"Can't I just keep all my configurations in setup.cfg or pyproject.toml?"},{"location":"#how-does-statue-differ-from-pre-commit","text":"pre-commit has been for a long time the go-to tool for running linters and formatters on your codebase, and it is provided with predefined hooks for most state-of-the-art tools. While we surely recommend on using pre-commit , here are few reasons why you might want to consider also using Statue : If you don't need each and every commit to pass your linters If you want to use a linters and formatters that doesn't have .pre-commit-hooks.yaml file If you use a lot of linters and formatters which cause your git commit to hang for long periods of time If you want to run your linters and formatters with different arguments on different files and directories If you need clear and concise reports of your linters evaluations","title":"How does Statue differ from pre-commit?"},{"location":"#whats-next","text":"Go on to the quick start tutorial in order to begin using Statue in a few short steps Learn a few tips how to use statue run efficiently","title":"What's next?"},{"location":"cli_references/","text":"statue Statue is a static code analysis tools orchestrator. Usage: statue [OPTIONS] COMMAND [ARGS]... Options: --version Show the version and exit. --config FILE Statue configuration file. --cache-dir DIRECTORY Statue caching directory path --help Show this message and exit. Subcommands commands : Commands related actions such as list, install, show, etc. config : Configuration related actions. contexts : Contexts related actions such as list, show, etc. history : History related actions such as list, show, etc. run : Run static code analysis commands on sources. show-tree : Show sources configuration as a tree. templates : Template related actions such as list, show, etc. statue commands Commands related actions such as list, install, show, etc. Usage: statue commands [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Subcommands install : Install missing commands. list : List matching commands to contexts, allow list and deny list. show : Show information about specific command. statue commands install Install missing commands. Usage: statue commands install [OPTIONS] Options: --silent Set verbosity to \"silent\". --verbose Set verbosity to \"verbose\". --verbosity [normal|silent|verbose] [default: normal] --help Show this message and exit. statue commands list List matching commands to contexts, allow list and deny list. Usage: statue commands list [OPTIONS] Options: --help Show this message and exit. statue commands show Show information about specific command. Usage: statue commands show [OPTIONS] COMMAND_NAME Options: --help Show this message and exit. statue config Configuration related actions. Usage: statue config [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Subcommands add-command : Add new command to configuration. add-context : Add new context to configuration. add-source : Add new source to configuration. disable-cache : Disabled caching in configuration. edit-command : Edit context from configuration. edit-context : Edit context from configuration. edit-source : Edit a source from configuration. enable-cache : Enabled caching in configuration. fix-versions : Fixate the installed version of the commands. init : Initialize configuration for Statue. remove-command : Remove command from configuration. remove-context : Remove context from configuration. remove-source : Remove context from configuration. set-history-size : Choose which runner mode will be used by default. set-mode : Choose which runner mode will be used by default. show : Show configuration file context. statue config add-command Add new command to configuration. Usage: statue config add-command [OPTIONS] Options: --config FILE Statue configuration file. --help Show this message and exit. statue config add-context Add new context to configuration. Usage: statue config add-context [OPTIONS] Options: --config FILE Statue configuration file. --help Show this message and exit. statue config add-source Add new source to configuration. Usage: statue config add-source [OPTIONS] [SOURCES]... Options: --config FILE Statue configuration file. --help Show this message and exit. statue config disable-cache Disabled caching in configuration. Usage: statue config disable-cache [OPTIONS] Options: --config FILE Statue configuration file. --help Show this message and exit. statue config edit-command Edit context from configuration. Usage: statue config edit-command [OPTIONS] COMMAND_NAME Options: --config FILE Statue configuration file. --help Show this message and exit. statue config edit-context Edit context from configuration. Usage: statue config edit-context [OPTIONS] CONTEXT_NAME Options: --config FILE Statue configuration file. --help Show this message and exit. statue config edit-source Edit a source from configuration. Usage: statue config edit-source [OPTIONS] SOURCE Options: --config FILE Statue configuration file. --help Show this message and exit. statue config enable-cache Enabled caching in configuration. Usage: statue config enable-cache [OPTIONS] Options: --config FILE Statue configuration file. --help Show this message and exit. statue config fix-versions Fixate the installed version of the commands. This helps you make sure that you use the same checkers in all commands across time. Usage: statue config fix-versions [OPTIONS] Options: --config FILE Statue configuration file. -l, --latest Update commands to latest before fixing the version. If a command is not installed, will install it. --verbose Set verbosity to \"verbose\". --help Show this message and exit. statue config init Initialize configuration for Statue. By default, this command searches for sources files in the given directory (cwd by default) and sets them with default contexts. You can run this command with the \"-i\" flag in order to choose interactively which source files to track and which contexts to assign to them. Usage: statue config init [OPTIONS] Options: --config FILE Statue configuration file. -t, --template TEXT Configuration template name --with-sources / --no-sources Track available sources and add to configuration -e, --exclude PATH Sources paths that Statue will ignore tracking -y --git / --no-git Should use git to trace ignored files --fix-versions Fix versions in config when running -i, --install Install latest version for all commands in configuration --blank Initialize blank configuration --help Show this message and exit. statue config remove-command Remove command from configuration. Usage: statue config remove-command [OPTIONS] COMMAND_NAME Options: --config FILE Statue configuration file. --help Show this message and exit. statue config remove-context Remove context from configuration. Usage: statue config remove-context [OPTIONS] CONTEXT_NAME Options: --config FILE Statue configuration file. --help Show this message and exit. statue config remove-source Remove context from configuration. Usage: statue config remove-source [OPTIONS] SOURCE Options: --config FILE Statue configuration file. --help Show this message and exit. statue config set-history-size Choose which runner mode will be used by default. Usage: statue config set-history-size [OPTIONS] SIZE Options: --config FILE Statue configuration file. --help Show this message and exit. statue config set-mode Choose which runner mode will be used by default. Usage: statue config set-mode [OPTIONS] {sync|async} Options: --config FILE Statue configuration file. --help Show this message and exit. statue config show Show configuration file context. Usage: statue config show [OPTIONS] Options: --config FILE Statue configuration file. --help Show this message and exit. statue contexts Contexts related actions such as list, show, etc. Usage: statue contexts [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Subcommands list : Print all available contexts. show : Print all available contexts. statue contexts list Print all available contexts. Usage: statue contexts list [OPTIONS] Options: --help Show this message and exit. statue contexts show Print all available contexts. Usage: statue contexts show [OPTIONS] CONTEXT_NAME Options: --help Show this message and exit. statue history History related actions such as list, show, etc. Usage: statue history [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Subcommands clear : Clear records of previous statue runs. list : List all recent evaluations. show : Show past evaluation. statue history clear Clear records of previous statue runs. Usage: statue history clear [OPTIONS] Options: -f, --force Force deletion and avoid prompt. -l, --limit INTEGER Limit the number of deleted records. Deletes earliest evaluations. --help Show this message and exit. statue history list List all recent evaluations. Usage: statue history list [OPTIONS] Options: --head INTEGER Show only the nth recent evaluations --help Show this message and exit. statue history show Show past evaluation. Usage: statue history show [OPTIONS] Options: -n INTEGER Show nth recent evaluation. 1 by default --verbose Set verbosity to \"verbose\". --help Show this message and exit. statue run Run static code analysis commands on sources. Source files to run Statue on can be presented as positional arguments. When no source files are presented, will use configuration file to determine on which files to run Usage: statue run [OPTIONS] [SOURCES]... Options: -c, --context TEXT Context in which to evaluate the commands. -a, --allow TEXT Allowed command. -d, --deny TEXT Denied command. -i, --install Install commands before running if missing -p, --previous INTEGER Run commands of the nth recent evaluation. combine this flag with \"-f\" in order to run only failed commands from that evaluation -r, --recent Run commands of the most recent evaluation. Same as \"--previous 1\". -f, --failed Run commands from the most recent failed run -fo, --failed-only Same as \"--failed\", but will only run the commands and not those who ended successfully --cache / --no-cache Save evaluation to cache or not --silent Set verbosity to \"silent\". --verbose Set verbosity to \"verbose\". --verbosity [normal|silent|verbose] [default: normal] --mode [sync|async] Should run asynchronously or not. -o, --output FILE Output path to save evaluation result --help Show this message and exit. statue show-tree Show sources configuration as a tree. This method prints the sources' configuration as a tree, including: contexts, allow and deny lists and matching commands. Usage: statue show-tree [OPTIONS] Options: -c, --context TEXT Context in which to evaluate the commands. -a, --allow TEXT Allowed command. -d, --deny TEXT Denied command. --help Show this message and exit. statue templates Template related actions such as list, show, etc. Usage: statue templates [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Subcommands clear : Remove template by name. list : List all available templates. remove : Remove template by name. save : Save current configuration as template. show : Show template by name. statue templates clear Remove template by name. Usage: statue templates clear [OPTIONS] Options: --help Show this message and exit. statue templates list List all available templates. Usage: statue templates list [OPTIONS] Options: --help Show this message and exit. statue templates remove Remove template by name. Usage: statue templates remove [OPTIONS] TEMPLATE_NAME Options: --help Show this message and exit. statue templates save Save current configuration as template. Usage: statue templates save [OPTIONS] TEMPLATE_NAME Options: --config FILE Statue configuration file. --override / -no-override Override template with given name if already exists. --help Show this message and exit. statue templates show Show template by name. Usage: statue templates show [OPTIONS] TEMPLATE_NAME Options: --help Show this message and exit.","title":"CLI References"},{"location":"cli_references/#statue","text":"Statue is a static code analysis tools orchestrator. Usage: statue [OPTIONS] COMMAND [ARGS]... Options: --version Show the version and exit. --config FILE Statue configuration file. --cache-dir DIRECTORY Statue caching directory path --help Show this message and exit. Subcommands commands : Commands related actions such as list, install, show, etc. config : Configuration related actions. contexts : Contexts related actions such as list, show, etc. history : History related actions such as list, show, etc. run : Run static code analysis commands on sources. show-tree : Show sources configuration as a tree. templates : Template related actions such as list, show, etc.","title":"statue"},{"location":"cli_references/#statue-commands","text":"Commands related actions such as list, install, show, etc. Usage: statue commands [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Subcommands install : Install missing commands. list : List matching commands to contexts, allow list and deny list. show : Show information about specific command.","title":"commands"},{"location":"cli_references/#statue-commands-install","text":"Install missing commands. Usage: statue commands install [OPTIONS] Options: --silent Set verbosity to \"silent\". --verbose Set verbosity to \"verbose\". --verbosity [normal|silent|verbose] [default: normal] --help Show this message and exit.","title":"install"},{"location":"cli_references/#statue-commands-list","text":"List matching commands to contexts, allow list and deny list. Usage: statue commands list [OPTIONS] Options: --help Show this message and exit.","title":"list"},{"location":"cli_references/#statue-commands-show","text":"Show information about specific command. Usage: statue commands show [OPTIONS] COMMAND_NAME Options: --help Show this message and exit.","title":"show"},{"location":"cli_references/#statue-config","text":"Configuration related actions. Usage: statue config [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Subcommands add-command : Add new command to configuration. add-context : Add new context to configuration. add-source : Add new source to configuration. disable-cache : Disabled caching in configuration. edit-command : Edit context from configuration. edit-context : Edit context from configuration. edit-source : Edit a source from configuration. enable-cache : Enabled caching in configuration. fix-versions : Fixate the installed version of the commands. init : Initialize configuration for Statue. remove-command : Remove command from configuration. remove-context : Remove context from configuration. remove-source : Remove context from configuration. set-history-size : Choose which runner mode will be used by default. set-mode : Choose which runner mode will be used by default. show : Show configuration file context.","title":"config"},{"location":"cli_references/#statue-config-add-command","text":"Add new command to configuration. Usage: statue config add-command [OPTIONS] Options: --config FILE Statue configuration file. --help Show this message and exit.","title":"add-command"},{"location":"cli_references/#statue-config-add-context","text":"Add new context to configuration. Usage: statue config add-context [OPTIONS] Options: --config FILE Statue configuration file. --help Show this message and exit.","title":"add-context"},{"location":"cli_references/#statue-config-add-source","text":"Add new source to configuration. Usage: statue config add-source [OPTIONS] [SOURCES]... Options: --config FILE Statue configuration file. --help Show this message and exit.","title":"add-source"},{"location":"cli_references/#statue-config-disable-cache","text":"Disabled caching in configuration. Usage: statue config disable-cache [OPTIONS] Options: --config FILE Statue configuration file. --help Show this message and exit.","title":"disable-cache"},{"location":"cli_references/#statue-config-edit-command","text":"Edit context from configuration. Usage: statue config edit-command [OPTIONS] COMMAND_NAME Options: --config FILE Statue configuration file. --help Show this message and exit.","title":"edit-command"},{"location":"cli_references/#statue-config-edit-context","text":"Edit context from configuration. Usage: statue config edit-context [OPTIONS] CONTEXT_NAME Options: --config FILE Statue configuration file. --help Show this message and exit.","title":"edit-context"},{"location":"cli_references/#statue-config-edit-source","text":"Edit a source from configuration. Usage: statue config edit-source [OPTIONS] SOURCE Options: --config FILE Statue configuration file. --help Show this message and exit.","title":"edit-source"},{"location":"cli_references/#statue-config-enable-cache","text":"Enabled caching in configuration. Usage: statue config enable-cache [OPTIONS] Options: --config FILE Statue configuration file. --help Show this message and exit.","title":"enable-cache"},{"location":"cli_references/#statue-config-fix-versions","text":"Fixate the installed version of the commands. This helps you make sure that you use the same checkers in all commands across time. Usage: statue config fix-versions [OPTIONS] Options: --config FILE Statue configuration file. -l, --latest Update commands to latest before fixing the version. If a command is not installed, will install it. --verbose Set verbosity to \"verbose\". --help Show this message and exit.","title":"fix-versions"},{"location":"cli_references/#statue-config-init","text":"Initialize configuration for Statue. By default, this command searches for sources files in the given directory (cwd by default) and sets them with default contexts. You can run this command with the \"-i\" flag in order to choose interactively which source files to track and which contexts to assign to them. Usage: statue config init [OPTIONS] Options: --config FILE Statue configuration file. -t, --template TEXT Configuration template name --with-sources / --no-sources Track available sources and add to configuration -e, --exclude PATH Sources paths that Statue will ignore tracking -y --git / --no-git Should use git to trace ignored files --fix-versions Fix versions in config when running -i, --install Install latest version for all commands in configuration --blank Initialize blank configuration --help Show this message and exit.","title":"init"},{"location":"cli_references/#statue-config-remove-command","text":"Remove command from configuration. Usage: statue config remove-command [OPTIONS] COMMAND_NAME Options: --config FILE Statue configuration file. --help Show this message and exit.","title":"remove-command"},{"location":"cli_references/#statue-config-remove-context","text":"Remove context from configuration. Usage: statue config remove-context [OPTIONS] CONTEXT_NAME Options: --config FILE Statue configuration file. --help Show this message and exit.","title":"remove-context"},{"location":"cli_references/#statue-config-remove-source","text":"Remove context from configuration. Usage: statue config remove-source [OPTIONS] SOURCE Options: --config FILE Statue configuration file. --help Show this message and exit.","title":"remove-source"},{"location":"cli_references/#statue-config-set-history-size","text":"Choose which runner mode will be used by default. Usage: statue config set-history-size [OPTIONS] SIZE Options: --config FILE Statue configuration file. --help Show this message and exit.","title":"set-history-size"},{"location":"cli_references/#statue-config-set-mode","text":"Choose which runner mode will be used by default. Usage: statue config set-mode [OPTIONS] {sync|async} Options: --config FILE Statue configuration file. --help Show this message and exit.","title":"set-mode"},{"location":"cli_references/#statue-config-show","text":"Show configuration file context. Usage: statue config show [OPTIONS] Options: --config FILE Statue configuration file. --help Show this message and exit.","title":"show"},{"location":"cli_references/#statue-contexts","text":"Contexts related actions such as list, show, etc. Usage: statue contexts [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Subcommands list : Print all available contexts. show : Print all available contexts.","title":"contexts"},{"location":"cli_references/#statue-contexts-list","text":"Print all available contexts. Usage: statue contexts list [OPTIONS] Options: --help Show this message and exit.","title":"list"},{"location":"cli_references/#statue-contexts-show","text":"Print all available contexts. Usage: statue contexts show [OPTIONS] CONTEXT_NAME Options: --help Show this message and exit.","title":"show"},{"location":"cli_references/#statue-history","text":"History related actions such as list, show, etc. Usage: statue history [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Subcommands clear : Clear records of previous statue runs. list : List all recent evaluations. show : Show past evaluation.","title":"history"},{"location":"cli_references/#statue-history-clear","text":"Clear records of previous statue runs. Usage: statue history clear [OPTIONS] Options: -f, --force Force deletion and avoid prompt. -l, --limit INTEGER Limit the number of deleted records. Deletes earliest evaluations. --help Show this message and exit.","title":"clear"},{"location":"cli_references/#statue-history-list","text":"List all recent evaluations. Usage: statue history list [OPTIONS] Options: --head INTEGER Show only the nth recent evaluations --help Show this message and exit.","title":"list"},{"location":"cli_references/#statue-history-show","text":"Show past evaluation. Usage: statue history show [OPTIONS] Options: -n INTEGER Show nth recent evaluation. 1 by default --verbose Set verbosity to \"verbose\". --help Show this message and exit.","title":"show"},{"location":"cli_references/#statue-run","text":"Run static code analysis commands on sources. Source files to run Statue on can be presented as positional arguments. When no source files are presented, will use configuration file to determine on which files to run Usage: statue run [OPTIONS] [SOURCES]... Options: -c, --context TEXT Context in which to evaluate the commands. -a, --allow TEXT Allowed command. -d, --deny TEXT Denied command. -i, --install Install commands before running if missing -p, --previous INTEGER Run commands of the nth recent evaluation. combine this flag with \"-f\" in order to run only failed commands from that evaluation -r, --recent Run commands of the most recent evaluation. Same as \"--previous 1\". -f, --failed Run commands from the most recent failed run -fo, --failed-only Same as \"--failed\", but will only run the commands and not those who ended successfully --cache / --no-cache Save evaluation to cache or not --silent Set verbosity to \"silent\". --verbose Set verbosity to \"verbose\". --verbosity [normal|silent|verbose] [default: normal] --mode [sync|async] Should run asynchronously or not. -o, --output FILE Output path to save evaluation result --help Show this message and exit.","title":"run"},{"location":"cli_references/#statue-show-tree","text":"Show sources configuration as a tree. This method prints the sources' configuration as a tree, including: contexts, allow and deny lists and matching commands. Usage: statue show-tree [OPTIONS] Options: -c, --context TEXT Context in which to evaluate the commands. -a, --allow TEXT Allowed command. -d, --deny TEXT Denied command. --help Show this message and exit.","title":"show-tree"},{"location":"cli_references/#statue-templates","text":"Template related actions such as list, show, etc. Usage: statue templates [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Subcommands clear : Remove template by name. list : List all available templates. remove : Remove template by name. save : Save current configuration as template. show : Show template by name.","title":"templates"},{"location":"cli_references/#statue-templates-clear","text":"Remove template by name. Usage: statue templates clear [OPTIONS] Options: --help Show this message and exit.","title":"clear"},{"location":"cli_references/#statue-templates-list","text":"List all available templates. Usage: statue templates list [OPTIONS] Options: --help Show this message and exit.","title":"list"},{"location":"cli_references/#statue-templates-remove","text":"Remove template by name. Usage: statue templates remove [OPTIONS] TEMPLATE_NAME Options: --help Show this message and exit.","title":"remove"},{"location":"cli_references/#statue-templates-save","text":"Save current configuration as template. Usage: statue templates save [OPTIONS] TEMPLATE_NAME Options: --config FILE Statue configuration file. --override / -no-override Override template with given name if already exists. --help Show this message and exit.","title":"save"},{"location":"cli_references/#statue-templates-show","text":"Show template by name. Usage: statue templates show [OPTIONS] TEMPLATE_NAME Options: --help Show this message and exit.","title":"show"},{"location":"templates/","text":"Out-Of-The-Box Templates This file contains all the out-of-the-box templates provided by Statue . At this time Statue supports only a single template, which is the default template. This will be changed in the future. Default Template Contexts fast Run short-time commands. Good for smoke tests strict Strict checks, for ones who never compromise! format Reformating commands, with in-file replacements. Aliases : fmt test Checks for test files. documentation Commands regarding code documentation. Aliases : docs Commands autoflake Remove unused imports and variables Default Arguments : autoflake <source> --in-place --recursive --expand-star-imports --remove-all-unused-imports Required Contexts : format Allowed Contexts : fast , test bandit Python security checks tool. Default Arguments : bandit <source> -r --skip=B603 black Code formatter for python. Default Arguments : black <source> --check Allowed Contexts : fast , test Specified contexts : format : Clears arguments darglint Tool for documentation coverage. Default Arguments : darglint <source> --docstring-style=sphinx Allowed Contexts : documentation flake8 Code style checker for python. Default Arguments : flake8 <source> --max-line-length=88 --ignore=E203,W503,DAR Allowed Contexts : fast , test isort Tool for sorting and cleaning python imports. Default Arguments : isort <source> --profile=black --check-only Allowed Contexts : fast , test Specified contexts : format : Overrides arguments with --profile=black mypy Validate types using mypy. Default Arguments : mypy <source> --ignore-missing-imports Allowed Contexts : test Specified contexts : strict : Adds arguments --strict pydocstyle Tool for python docstring style enforcing Default Arguments : pydocstyle <source> --ignore=D203,D212,D400,D401 Allowed Contexts : documentation pylint Python code linter Default Arguments : pylint <source> --ignore-imports=y --load-plugins=pylint.extensions.docparams --enable=useless-suppression,use-symbolic-message-instead --fail-on=useless-suppression,use-symbolic-message-instead Specified contexts : documentation : Overrides arguments with --ignore-imports=y --load-plugins=pylint.extensions.docparams --disable=all --enable=C0115,C0304,C0116,C0114 --enable=W9005,W9006,W9008,W9010,W9011,W9012,W9013 --enable=W9014,W9015,W9016,W9017,W9018,W9019,W9020,W9021 test : Adds arguments --disable=C0103,C0114,C0115,C0116,C0203,C0204,C0411 --disable=E0401,E0611,E1101,E1120,E1130,E1139 --disable=R0801,R0902,R0903,R0904,R0913 --disable=W0201,W0613,W0621","title":"Templates"},{"location":"templates/#out-of-the-box-templates","text":"This file contains all the out-of-the-box templates provided by Statue . At this time Statue supports only a single template, which is the default template. This will be changed in the future.","title":"Out-Of-The-Box Templates"},{"location":"templates/#default-template","text":"","title":"Default Template"},{"location":"templates/#contexts","text":"","title":"Contexts"},{"location":"templates/#fast","text":"Run short-time commands. Good for smoke tests","title":"fast"},{"location":"templates/#strict","text":"Strict checks, for ones who never compromise!","title":"strict"},{"location":"templates/#format","text":"Reformating commands, with in-file replacements. Aliases : fmt","title":"format"},{"location":"templates/#test","text":"Checks for test files.","title":"test"},{"location":"templates/#documentation","text":"Commands regarding code documentation. Aliases : docs","title":"documentation"},{"location":"templates/#commands","text":"","title":"Commands"},{"location":"templates/#autoflake","text":"Remove unused imports and variables Default Arguments : autoflake <source> --in-place --recursive --expand-star-imports --remove-all-unused-imports Required Contexts : format Allowed Contexts : fast , test","title":"autoflake"},{"location":"templates/#bandit","text":"Python security checks tool. Default Arguments : bandit <source> -r --skip=B603","title":"bandit"},{"location":"templates/#black","text":"Code formatter for python. Default Arguments : black <source> --check Allowed Contexts : fast , test Specified contexts : format : Clears arguments","title":"black"},{"location":"templates/#darglint","text":"Tool for documentation coverage. Default Arguments : darglint <source> --docstring-style=sphinx Allowed Contexts : documentation","title":"darglint"},{"location":"templates/#flake8","text":"Code style checker for python. Default Arguments : flake8 <source> --max-line-length=88 --ignore=E203,W503,DAR Allowed Contexts : fast , test","title":"flake8"},{"location":"templates/#isort","text":"Tool for sorting and cleaning python imports. Default Arguments : isort <source> --profile=black --check-only Allowed Contexts : fast , test Specified contexts : format : Overrides arguments with --profile=black","title":"isort"},{"location":"templates/#mypy","text":"Validate types using mypy. Default Arguments : mypy <source> --ignore-missing-imports Allowed Contexts : test Specified contexts : strict : Adds arguments --strict","title":"mypy"},{"location":"templates/#pydocstyle","text":"Tool for python docstring style enforcing Default Arguments : pydocstyle <source> --ignore=D203,D212,D400,D401 Allowed Contexts : documentation","title":"pydocstyle"},{"location":"templates/#pylint","text":"Python code linter Default Arguments : pylint <source> --ignore-imports=y --load-plugins=pylint.extensions.docparams --enable=useless-suppression,use-symbolic-message-instead --fail-on=useless-suppression,use-symbolic-message-instead Specified contexts : documentation : Overrides arguments with --ignore-imports=y --load-plugins=pylint.extensions.docparams --disable=all --enable=C0115,C0304,C0116,C0114 --enable=W9005,W9006,W9008,W9010,W9011,W9012,W9013 --enable=W9014,W9015,W9016,W9017,W9018,W9019,W9020,W9021 test : Adds arguments --disable=C0103,C0114,C0115,C0116,C0203,C0204,C0411 --disable=E0401,E0611,E1101,E1120,E1130,E1139 --disable=R0801,R0902,R0903,R0904,R0913 --disable=W0201,W0613,W0621","title":"pylint"},{"location":"advanced/advanced_contexts/","text":"Taking Contexts to The Next Level We've already discussed contexts and how to use them. Now it's time to take things for the next level. Here are some advanced abilities you can use to unleash the full power of contexts. Attaching A Context to A Source You added a new context and used an existing context and ran Statue with that context: statue run -c your_context But two things bother you: You don't want to use that context on all of your codebase You want to attach this context to a specific source on every run Fortunately, Statue can attach a context to a specific source and use that context every time a command is running on that context. You attach a context to a source in three ways: When you initialize Statue and run statue config init , when your source is presented, choose tracking it and choose your context to attach If you already initialized Statue and the source is not tracked, you can track the source by running statue config add-source your_source and when asked to specify contexts, specify the desired context If you already initialized Statue and the source is tracked, do the same as 2. but run statue config edit-source your_source . A Friendly Context By default, when presenting a context, a command will not run unless it comply one of the following: The context is allowed for this command The context is required for that command The context is specified for that command Each of the three possibilities requires the command to declare what to do with the context . However, sometimes you want the context to be allowed by default for all commands, meaning that by default, if the context is present the command will run the same as it would without it. In order to do exactly that you can define a context as allowed by default in the configuration. Just edit the context using statue config edit-context your_context and set allowed by default to true. If the context is non-existing, when adding it using statue config add-context specify it as allowed by default. Note If a context is explicitly denied for a command using the denied contexts field, the command will not run when the context is presented, even if it is allowed by default Keeping Things In The Family A powerful tool that contexts present is parenting , meaning that one context can be a parent of another context. How is that helpful? let's assume we have a context child which has a parent context parent . Now, if we run statue run -c child , the followings can happen when choosing how to run a command: If child is defined for the command (allowed, required, denied or specified) than that behaviour will take place. Otherwise, if parent is defined for the command than that behaviour will take place If both are not defined than the command will run if and only if child is allowed by default The usage of children contexts is very helpful for deeper specifications for commands. If we introduce a child context of another context it allows us to defined even more specific behavior for certain commands. Pay attention that one can create a chain of parents (grandparent, great-grandparent, great-great-grandparent, etc.) such that the behavior of the command will be taken from the closest ancestor to the given context which is explicitly defined for the command. Note While each context can have multiple children, contexts can have at most one parent You can define parents when editing a context ( statue config edit-context ) or adding one ( statue config add-context ). Living Under An Alias Naming things can be tricky. On the one hand, you want a meaningful name, even if it's a long one. On the other hand, you don't want to write long names every time. The same goes for contexts. Using an alias allows you to name your context with a meaningful name, but allowing users to call that context with a shorter name. For example, in our default template we have the documentation context. This is a long name! However, this context has an alias: docs . That means that instead of running: statue run -c documentation You can run: statue run -c docs You can use a context's alias instead of its name everywhere , including when specifying a context in the configuration. Statue will make sure to translate the alias to the real name of the context. Note A context can have more than one alias. The aliases can be used intechangably. Keeping Things In Order Contexts are a strong tool as they are, combining multiple contexts is even more powerful! If you run: statue run -c context1 -c context2 ... Statue will run will process all the commands with the presented contexts. Contexts that are allowed or required by a command will not change the arguments of this command. However, contexts that are specified for a command will change the arguments according to the order that they are presented in the command line . Here's an example: assume that context1 adds the arguments \"a\", \"b\" and \"c\" to the command my_command and context2 clears the arguments entirely for that command. By default, my_command runs with the arguments \"r\", \"t\" and \"s\". When running: statue run -c context1 -c context2 my_command will run without any arguments, since it first added \"a\", \"b\" and \"c\", and then cleared all the arguments, including the ones added by context1 : my_command arguments = [r t s] => (context1) => [r t s a b c] => (context2) => [] However, if you run: statue run -c context2 -c context1 my_command will run with the arguments \"a\", \"b\" and \"c\", since it first cleared all arguments (and removed \"r\", \"t\" and \"s\") and then added \"a\", \"b\" and \"c\": my_command arguments = [r t s] => (context2) => [] => (context1) => [a b c] On the contrary, if both of your context simply add arguments, and the command is invariant to the order to arguments, than changing the order to contexts will not affect the end result of the command run. Pay attention that the same is true when specifying contexts in the sources configuration! The order of contexts defined for the source is the order that the contexts will be processed. Note contexts which are attached to a given source will be processed after gloval contexts. That means that when running statue run -c context1 of a source with attached context context2 , context1 will be processed before context2 .","title":"Taking Contexts to The Next Level"},{"location":"advanced/advanced_contexts/#taking-contexts-to-the-next-level","text":"We've already discussed contexts and how to use them. Now it's time to take things for the next level. Here are some advanced abilities you can use to unleash the full power of contexts.","title":"Taking Contexts to The Next Level"},{"location":"advanced/advanced_contexts/#attaching-a-context-to-a-source","text":"You added a new context and used an existing context and ran Statue with that context: statue run -c your_context But two things bother you: You don't want to use that context on all of your codebase You want to attach this context to a specific source on every run Fortunately, Statue can attach a context to a specific source and use that context every time a command is running on that context. You attach a context to a source in three ways: When you initialize Statue and run statue config init , when your source is presented, choose tracking it and choose your context to attach If you already initialized Statue and the source is not tracked, you can track the source by running statue config add-source your_source and when asked to specify contexts, specify the desired context If you already initialized Statue and the source is tracked, do the same as 2. but run statue config edit-source your_source .","title":"Attaching A Context to A Source"},{"location":"advanced/advanced_contexts/#a-friendly-context","text":"By default, when presenting a context, a command will not run unless it comply one of the following: The context is allowed for this command The context is required for that command The context is specified for that command Each of the three possibilities requires the command to declare what to do with the context . However, sometimes you want the context to be allowed by default for all commands, meaning that by default, if the context is present the command will run the same as it would without it. In order to do exactly that you can define a context as allowed by default in the configuration. Just edit the context using statue config edit-context your_context and set allowed by default to true. If the context is non-existing, when adding it using statue config add-context specify it as allowed by default. Note If a context is explicitly denied for a command using the denied contexts field, the command will not run when the context is presented, even if it is allowed by default","title":"A Friendly Context"},{"location":"advanced/advanced_contexts/#keeping-things-in-the-family","text":"A powerful tool that contexts present is parenting , meaning that one context can be a parent of another context. How is that helpful? let's assume we have a context child which has a parent context parent . Now, if we run statue run -c child , the followings can happen when choosing how to run a command: If child is defined for the command (allowed, required, denied or specified) than that behaviour will take place. Otherwise, if parent is defined for the command than that behaviour will take place If both are not defined than the command will run if and only if child is allowed by default The usage of children contexts is very helpful for deeper specifications for commands. If we introduce a child context of another context it allows us to defined even more specific behavior for certain commands. Pay attention that one can create a chain of parents (grandparent, great-grandparent, great-great-grandparent, etc.) such that the behavior of the command will be taken from the closest ancestor to the given context which is explicitly defined for the command. Note While each context can have multiple children, contexts can have at most one parent You can define parents when editing a context ( statue config edit-context ) or adding one ( statue config add-context ).","title":"Keeping Things In The Family"},{"location":"advanced/advanced_contexts/#living-under-an-alias","text":"Naming things can be tricky. On the one hand, you want a meaningful name, even if it's a long one. On the other hand, you don't want to write long names every time. The same goes for contexts. Using an alias allows you to name your context with a meaningful name, but allowing users to call that context with a shorter name. For example, in our default template we have the documentation context. This is a long name! However, this context has an alias: docs . That means that instead of running: statue run -c documentation You can run: statue run -c docs You can use a context's alias instead of its name everywhere , including when specifying a context in the configuration. Statue will make sure to translate the alias to the real name of the context. Note A context can have more than one alias. The aliases can be used intechangably.","title":"Living Under An Alias"},{"location":"advanced/advanced_contexts/#keeping-things-in-order","text":"Contexts are a strong tool as they are, combining multiple contexts is even more powerful! If you run: statue run -c context1 -c context2 ... Statue will run will process all the commands with the presented contexts. Contexts that are allowed or required by a command will not change the arguments of this command. However, contexts that are specified for a command will change the arguments according to the order that they are presented in the command line . Here's an example: assume that context1 adds the arguments \"a\", \"b\" and \"c\" to the command my_command and context2 clears the arguments entirely for that command. By default, my_command runs with the arguments \"r\", \"t\" and \"s\". When running: statue run -c context1 -c context2 my_command will run without any arguments, since it first added \"a\", \"b\" and \"c\", and then cleared all the arguments, including the ones added by context1 : my_command arguments = [r t s] => (context1) => [r t s a b c] => (context2) => [] However, if you run: statue run -c context2 -c context1 my_command will run with the arguments \"a\", \"b\" and \"c\", since it first cleared all arguments (and removed \"r\", \"t\" and \"s\") and then added \"a\", \"b\" and \"c\": my_command arguments = [r t s] => (context2) => [] => (context1) => [a b c] On the contrary, if both of your context simply add arguments, and the command is invariant to the order to arguments, than changing the order to contexts will not affect the end result of the command run. Pay attention that the same is true when specifying contexts in the sources configuration! The order of contexts defined for the source is the order that the contexts will be processed. Note contexts which are attached to a given source will be processed after gloval contexts. That means that when running statue run -c context1 of a source with attached context context2 , context1 will be processed before context2 .","title":"Keeping Things In Order"},{"location":"advanced/advanced_run/","text":"Run On Steroids This is an advanced tutorial for the statue run command. For a more fundamental tutorial please read the documentation here . Setting The Mode By default, when using statue run all commands are running asynchronously on different sources. That means that while command1 is running on sources1 , it can also run on source2 . The same goes for different commands. However, two commands does not run asynchronously on the same source . This is done in order to prevent different commands interfering with each other. This feature cannot be changed. If you wish Statue to run only one command at a time, you can simply run: statue run --mode=sync If you wish every run to use sync mode, you can set it in the configuration with: statue config set-mode sync If you wish to turn back the default async mode, simply run: statue config set-mode async Long-Term Memory Every time you use statue run , Statue will save the run results in history. This is done in order to allow the user to rerun Statue with the same configuration. By default, Statue saves the last 30 runs. You can change the history size of Statue by running: statue config set-history-size new_history_size Incognito By default, Statue will save each run of statue run in history. You can run Statue without saving to history by running: statue run --no-cache If you wish to stop Statue from saving results into history, you can disable caching in configuration by running: statue config disable-cache If you wish to re-enable caching, simply run: statue config enable-cache Denying And Allowing Commands We have already mentioned that a source can specify which commands to allow and which to deny. One can allow or deny commands for the entire run using the --allow or --deny flags. For example, running: statue run --allow command1 --allow command2 Will only run command1 and command2 (on sources with matching filters). On the other hand: statue run --deny command1 --deny command2 Will run all commands (again, according to filters), besides command1 and command2 .","title":"Run On Steroids"},{"location":"advanced/advanced_run/#run-on-steroids","text":"This is an advanced tutorial for the statue run command. For a more fundamental tutorial please read the documentation here .","title":"Run On Steroids"},{"location":"advanced/advanced_run/#setting-the-mode","text":"By default, when using statue run all commands are running asynchronously on different sources. That means that while command1 is running on sources1 , it can also run on source2 . The same goes for different commands. However, two commands does not run asynchronously on the same source . This is done in order to prevent different commands interfering with each other. This feature cannot be changed. If you wish Statue to run only one command at a time, you can simply run: statue run --mode=sync If you wish every run to use sync mode, you can set it in the configuration with: statue config set-mode sync If you wish to turn back the default async mode, simply run: statue config set-mode async","title":"Setting The Mode"},{"location":"advanced/advanced_run/#long-term-memory","text":"Every time you use statue run , Statue will save the run results in history. This is done in order to allow the user to rerun Statue with the same configuration. By default, Statue saves the last 30 runs. You can change the history size of Statue by running: statue config set-history-size new_history_size","title":"Long-Term Memory"},{"location":"advanced/advanced_run/#incognito","text":"By default, Statue will save each run of statue run in history. You can run Statue without saving to history by running: statue run --no-cache If you wish to stop Statue from saving results into history, you can disable caching in configuration by running: statue config disable-cache If you wish to re-enable caching, simply run: statue config enable-cache","title":"Incognito"},{"location":"advanced/advanced_run/#denying-and-allowing-commands","text":"We have already mentioned that a source can specify which commands to allow and which to deny. One can allow or deny commands for the entire run using the --allow or --deny flags. For example, running: statue run --allow command1 --allow command2 Will only run command1 and command2 (on sources with matching filters). On the other hand: statue run --deny command1 --deny command2 Will run all commands (again, according to filters), besides command1 and command2 .","title":"Denying And Allowing Commands"},{"location":"advanced/user_templates/","text":"User Templates We've already discussed how to initialize the configuration from the default template and how to create blank configuration file. However, you often want to create a template of your own in order to reuse it in multiple projects. This can be easily done with Statue . Thinking Globally After editing a configuration file for a specific project by adding and removing commands and context, you can save this configuration as a template by running: statue templates save new_template_name This will save all the contexts and commands, including contexts specifications, as a template with the given name. Note Template names must start with letters and contain only letters, numbers and underscores. You cannot use the same template name twice and cannot use Using New Templates After saving your configuration as template, you can start using it in other projects. You can see all the available templates by running: statue templates list You can see which contexts and commands are available for each template by running: statue templates show tempalte_name In order to create a new configuration file in another project, you can simply run: statue config init --template=template_name and the configuration file will be created according to that template. Note While templates contain commands and contexts, they do not contain sources specifications. That means that when using a template for a new project, make sure to respecify contexts and commands for the sources of that project. Keeping Things Up-To-Date When you create a template from a project configuration, changing the configuration file will not affect the template. If you wish to update the template according to the project configuration run: statue templates save template_name --override Removing Templates You can remove a user template by running: statue templates remove template_name If you wish to remove all user templates, simply run: statue templates clear Note Default templates cannot be removed by the user Warning When a template is removed via the remove and clear command, it cannot be restored.","title":"User Templates"},{"location":"advanced/user_templates/#user-templates","text":"We've already discussed how to initialize the configuration from the default template and how to create blank configuration file. However, you often want to create a template of your own in order to reuse it in multiple projects. This can be easily done with Statue .","title":"User Templates"},{"location":"advanced/user_templates/#thinking-globally","text":"After editing a configuration file for a specific project by adding and removing commands and context, you can save this configuration as a template by running: statue templates save new_template_name This will save all the contexts and commands, including contexts specifications, as a template with the given name. Note Template names must start with letters and contain only letters, numbers and underscores. You cannot use the same template name twice and cannot use","title":"Thinking Globally"},{"location":"advanced/user_templates/#using-new-templates","text":"After saving your configuration as template, you can start using it in other projects. You can see all the available templates by running: statue templates list You can see which contexts and commands are available for each template by running: statue templates show tempalte_name In order to create a new configuration file in another project, you can simply run: statue config init --template=template_name and the configuration file will be created according to that template. Note While templates contain commands and contexts, they do not contain sources specifications. That means that when using a template for a new project, make sure to respecify contexts and commands for the sources of that project.","title":"Using New Templates"},{"location":"advanced/user_templates/#keeping-things-up-to-date","text":"When you create a template from a project configuration, changing the configuration file will not affect the template. If you wish to update the template according to the project configuration run: statue templates save template_name --override","title":"Keeping Things Up-To-Date"},{"location":"advanced/user_templates/#removing-templates","text":"You can remove a user template by running: statue templates remove template_name If you wish to remove all user templates, simply run: statue templates clear Note Default templates cannot be removed by the user Warning When a template is removed via the remove and clear command, it cannot be restored.","title":"Removing Templates"},{"location":"tutorials/configuration/","text":"Configurate It Statue , like any other static code analysis tool, uses a configuration file to specify how it should operate. This file is statue.toml , and it is the file that has been created when you ran statue config init in the quick start manual. In the next few paragraphs we'll show you how to initialize the configuration file and how to edit it in order to add new contexts and commands. Note At the moment Statue does not support using setup.cfg and pyproject.toml as its configuration file. This feature might be considered in the future. What The Configuration is Made of? Statue 's Configuration is made of 4 sections: General Settings - general Statue settings including history size and runner mode Contexts Settings - list of all available contexts Commands Settings - list of all available commands, including context specifications Sources Settings - list of all tracked sources, including which contexts to apply on them, which commands to allow running on them and which commands to deny. We will go through each section in a moment. Configuration Initialization By now you're already familiar with the command statue config init . This command creates the configuration file statue.toml with default contexts and commands. When initializing the configuration file, Statue will add by default the contexts and commands presented in the default template . As for sources, Statue will look for python scripts and packages and will ask you to approve tracking those files. If you choose to track a source, Statue will ask you to specify for each source the following: Contexts - which contexts to apply when running commands on that source Allowed Commands - which commands are allowed to be run on that source. If skipped, all commands are allowed Denied Commands - which commands are denied from being run on that source. If skipped, no command is denied Warning One can not set both \"allowed commands\" and \"denied commands\" for the same source. You can only set one of them or none of them. When Statue ask you to track a package, you can choose to expend it in order to specify different contexts on different modules in that package. By default, when suggesting sources to track, Statue will ignore sources that are ignored by git. If you wish to include these files in Statue 's search, run: statue config init --no-git Moreover, if you want Statue to ignore tracking a specific file or a directory entirely, you can run: statue config init --exclude=path_to_exclude If you wish to initialize Statue without any sources at all, simply run: statue config init --no-sources Lastly, you can initialize empty configuration file by running: statue config init --blank If you didn't run statue config init already, now would be the perfect time to do so before you start editing the configuration file. Edit Via Command Line, Not Configuration File One major difference between Statue and other static code analysis tools is that Statue encourages you to never edit your configuration file manually. Instead, Statue 's configuration file is fully editable via command line using the statue config commands. The reason we don't recommend editing the configuration file manually is that by using statue config , Statue can make sure that there are no conflicts in the configuration file. If some of those conflicts emerge when you edit your configuration, Statue will ask you to re-enter some fields you've filled, or it will abort. Warning Like all other static code analysis tools, Statue does not save configuration file history. Therefore, unless you're using a VCS tool like git to track statue.toml changes, we highly recommend editing the configuration carefully. Editing the Configuration It's as simple as it can get! Just run statue config --help and see which commands you can use to edit the configuration file. For example, you can run statue config add-context in order to add a new context to configuration. Just follow the instruction and the new context will be added! Warning Pay attention that using the remove-context , remove-command and remove-source commands will remove the specified context, command and source respectively, including all of their references! What's next? Learn about the default template and which contexts and commands are available in it Learn how to turn your project's configuration into a template","title":"Configurate It"},{"location":"tutorials/configuration/#configurate-it","text":"Statue , like any other static code analysis tool, uses a configuration file to specify how it should operate. This file is statue.toml , and it is the file that has been created when you ran statue config init in the quick start manual. In the next few paragraphs we'll show you how to initialize the configuration file and how to edit it in order to add new contexts and commands. Note At the moment Statue does not support using setup.cfg and pyproject.toml as its configuration file. This feature might be considered in the future.","title":"Configurate It"},{"location":"tutorials/configuration/#what-the-configuration-is-made-of","text":"Statue 's Configuration is made of 4 sections: General Settings - general Statue settings including history size and runner mode Contexts Settings - list of all available contexts Commands Settings - list of all available commands, including context specifications Sources Settings - list of all tracked sources, including which contexts to apply on them, which commands to allow running on them and which commands to deny. We will go through each section in a moment.","title":"What The Configuration is Made of?"},{"location":"tutorials/configuration/#configuration-initialization","text":"By now you're already familiar with the command statue config init . This command creates the configuration file statue.toml with default contexts and commands. When initializing the configuration file, Statue will add by default the contexts and commands presented in the default template . As for sources, Statue will look for python scripts and packages and will ask you to approve tracking those files. If you choose to track a source, Statue will ask you to specify for each source the following: Contexts - which contexts to apply when running commands on that source Allowed Commands - which commands are allowed to be run on that source. If skipped, all commands are allowed Denied Commands - which commands are denied from being run on that source. If skipped, no command is denied Warning One can not set both \"allowed commands\" and \"denied commands\" for the same source. You can only set one of them or none of them. When Statue ask you to track a package, you can choose to expend it in order to specify different contexts on different modules in that package. By default, when suggesting sources to track, Statue will ignore sources that are ignored by git. If you wish to include these files in Statue 's search, run: statue config init --no-git Moreover, if you want Statue to ignore tracking a specific file or a directory entirely, you can run: statue config init --exclude=path_to_exclude If you wish to initialize Statue without any sources at all, simply run: statue config init --no-sources Lastly, you can initialize empty configuration file by running: statue config init --blank If you didn't run statue config init already, now would be the perfect time to do so before you start editing the configuration file.","title":"Configuration Initialization"},{"location":"tutorials/configuration/#edit-via-command-line-not-configuration-file","text":"One major difference between Statue and other static code analysis tools is that Statue encourages you to never edit your configuration file manually. Instead, Statue 's configuration file is fully editable via command line using the statue config commands. The reason we don't recommend editing the configuration file manually is that by using statue config , Statue can make sure that there are no conflicts in the configuration file. If some of those conflicts emerge when you edit your configuration, Statue will ask you to re-enter some fields you've filled, or it will abort. Warning Like all other static code analysis tools, Statue does not save configuration file history. Therefore, unless you're using a VCS tool like git to track statue.toml changes, we highly recommend editing the configuration carefully.","title":"Edit Via Command Line, Not Configuration File"},{"location":"tutorials/configuration/#editing-the-configuration","text":"It's as simple as it can get! Just run statue config --help and see which commands you can use to edit the configuration file. For example, you can run statue config add-context in order to add a new context to configuration. Just follow the instruction and the new context will be added! Warning Pay attention that using the remove-context , remove-command and remove-source commands will remove the specified context, command and source respectively, including all of their references!","title":"Editing the Configuration"},{"location":"tutorials/configuration/#whats-next","text":"Learn about the default template and which contexts and commands are available in it Learn how to turn your project's configuration into a template","title":"What's next?"},{"location":"tutorials/contexts/","text":"It's All A Matter of Context What's Context? Contexts are the way of Statue to declare that a command (or multiple commands) should be running with different arguments than the default ones. By presenting a context you can inform Statue what kind of checks you want your linters to run or avoid running, and how to address each source in your codebase. The Power Of Contexts The use of contexts presents few major advantages: Using the same context name for multiple commands allows you to change the arguments of huge number of commands with a single magic word Attaching a context to a source helps you to direct the commands how to run on that particular source. Turning commands on and off when introducing a context which they don't comply with. Joining few contexts together allows you to express complex specifications for a given command or source Parenting context makes it easy to demonstrate increasingly specific requirements for a given command or source Aliasing a context for more fluent usage of that context Using contexts wisely when running Statue can help you to reduce time spent on code reviews and broken CI processes. Just run Statue with the right contexts, and Statue will take it from there. On the next few paragraph, we'll show you how to do exactly that. Presenting A Context on Specific Run If you want to run Statue with a context, simply run: statue run -c your_context_name if you want to see which contexts are available, run: statue context list It's A Game Changer! If you want to see how a context affect your commands, simply run: statue contexts show your_context_name After that, you'll see that the context can affect commands in four ways: Required by : If a context is required by a command, it means that the command will not run at all unless the context is presented Allowed by : If a context is allowed by a commands, it means that the command will run the same way when this context is presented without changing its arguments Denied by : If a context is denied by a command, it means that the command will not run if the context is present. This includes commands which are allowed by default Specified for : If a context is specified for a command, it means that presenting this context will change the arguments of the command. If you want to see exactly how a specified context change the arguments of a command, simply run: statue commands show your_command_name As you'll see, a context can change a command in 3 ways: Override arguments : Override all existing arguments and replace them with new ones Add arguments : Keep all existing arguments, but add new ones at the end of the command Clear arguments Remove all arguments of the command Different contexts can change a command in different ways. Be sure to use the right context in the right situation to elevate your code writing routines. Special Treatment One of the most common uses one might use contexts for is to inform commands to run differently on sources. This is done by editing Statue 's configuration file. Example 1: The \"Format\" Context If you're using Statue 's default template than by default all the formatters are in \"check\" mode. That means that they will not change your source code when using statue run , but return an error code if your code does not match their format. If you want the formatters to format your code, you must use the \"format\" context. You can do it by running: statue run -c format Example 2: The \"Test\" Context Most linters use the same heuristics to check all of your codebase, while normally allowing you to ignore specific regular expressions or entire files and directories. However, you might want to keep running the linters on all of your codebase, just with different checks on different sources. A good example for that is unit tests. Pylint requires by default that every function will be given a docstring. However, most developers agree that unit test functions don't have to include docstrings since their titles should be meaningful enough. This is where the \"test\" context come in handly. By adding the \"test\" context to your unit tests' directory, Statue will remove checks that are not required for unit tests. You can do it by editing the configuration file. What's next? Learn how to edit the configuration file via the command line Learn about the default template and which contexts and commands are available in it Learn about more advanced abilities of contexts","title":"It's All A Matter of Context"},{"location":"tutorials/contexts/#its-all-a-matter-of-context","text":"","title":"It's All A Matter of Context"},{"location":"tutorials/contexts/#whats-context","text":"Contexts are the way of Statue to declare that a command (or multiple commands) should be running with different arguments than the default ones. By presenting a context you can inform Statue what kind of checks you want your linters to run or avoid running, and how to address each source in your codebase.","title":"What's Context?"},{"location":"tutorials/contexts/#the-power-of-contexts","text":"The use of contexts presents few major advantages: Using the same context name for multiple commands allows you to change the arguments of huge number of commands with a single magic word Attaching a context to a source helps you to direct the commands how to run on that particular source. Turning commands on and off when introducing a context which they don't comply with. Joining few contexts together allows you to express complex specifications for a given command or source Parenting context makes it easy to demonstrate increasingly specific requirements for a given command or source Aliasing a context for more fluent usage of that context Using contexts wisely when running Statue can help you to reduce time spent on code reviews and broken CI processes. Just run Statue with the right contexts, and Statue will take it from there. On the next few paragraph, we'll show you how to do exactly that.","title":"The Power Of Contexts"},{"location":"tutorials/contexts/#presenting-a-context-on-specific-run","text":"If you want to run Statue with a context, simply run: statue run -c your_context_name if you want to see which contexts are available, run: statue context list","title":"Presenting A Context on Specific Run"},{"location":"tutorials/contexts/#its-a-game-changer","text":"If you want to see how a context affect your commands, simply run: statue contexts show your_context_name After that, you'll see that the context can affect commands in four ways: Required by : If a context is required by a command, it means that the command will not run at all unless the context is presented Allowed by : If a context is allowed by a commands, it means that the command will run the same way when this context is presented without changing its arguments Denied by : If a context is denied by a command, it means that the command will not run if the context is present. This includes commands which are allowed by default Specified for : If a context is specified for a command, it means that presenting this context will change the arguments of the command. If you want to see exactly how a specified context change the arguments of a command, simply run: statue commands show your_command_name As you'll see, a context can change a command in 3 ways: Override arguments : Override all existing arguments and replace them with new ones Add arguments : Keep all existing arguments, but add new ones at the end of the command Clear arguments Remove all arguments of the command Different contexts can change a command in different ways. Be sure to use the right context in the right situation to elevate your code writing routines.","title":"It's A Game Changer!"},{"location":"tutorials/contexts/#special-treatment","text":"One of the most common uses one might use contexts for is to inform commands to run differently on sources. This is done by editing Statue 's configuration file.","title":"Special Treatment"},{"location":"tutorials/contexts/#example-1-the-format-context","text":"If you're using Statue 's default template than by default all the formatters are in \"check\" mode. That means that they will not change your source code when using statue run , but return an error code if your code does not match their format. If you want the formatters to format your code, you must use the \"format\" context. You can do it by running: statue run -c format","title":"Example 1: The \"Format\" Context"},{"location":"tutorials/contexts/#example-2-the-test-context","text":"Most linters use the same heuristics to check all of your codebase, while normally allowing you to ignore specific regular expressions or entire files and directories. However, you might want to keep running the linters on all of your codebase, just with different checks on different sources. A good example for that is unit tests. Pylint requires by default that every function will be given a docstring. However, most developers agree that unit test functions don't have to include docstrings since their titles should be meaningful enough. This is where the \"test\" context come in handly. By adding the \"test\" context to your unit tests' directory, Statue will remove checks that are not required for unit tests. You can do it by editing the configuration file.","title":"Example 2: The \"Test\" Context"},{"location":"tutorials/contexts/#whats-next","text":"Learn how to edit the configuration file via the command line Learn about the default template and which contexts and commands are available in it Learn about more advanced abilities of contexts","title":"What's next?"},{"location":"tutorials/quick_start/","text":"Quick Start Installation In order to install Statue , simply run: pip install statue You can validate statue has been installed successfully by running: statue --version Which will print: statue, version 0.0.19 Initialize Statue In order for Statue to work correctly, you need to initialize Statue 's configuration file. This is simply done by going to your project's root directory and using the command: statue config init -i This command will create statue.toml file with the relevant configurations. Just follow the instructions, and your Statue configuration file will be ready! Note The flag -i flag is important. It will make Statue install all commands added in the configuration. You can see which commands have been set in your configuration using the command: statue config show-tree If you want to look at your configuration file as plain text, you can alternatively use: statue config show Note When using statue config init , Statue will ask you to specify for each source which contexts , allowed commands and denied commands to apply to that source. If you are not sure how to respond, skip by pressing enter. You'll always be able to edit your configuration later. Run! Now that your configuration file is ready, simply run: statue run And all the commands defined in the configuration will run on your codebase. Note When running statue run , Statue creates a cache directory named .statue which is saved in your project's root directory. If you're using git as your VCS tool we highly recommend that you add .statue to your .gitignore file. Fixate Your Versions We highly recommend fixing your commands versions in the configuration. This will make sure every developer working on your project uses the same command versions. You can do so by running: statue config fix-versions If you want to fix the versions of your commands to their latest available version, simply run: statue config fix-versions --latest What's Next? Learn how to use statue run in various ways to improve efficiency Learn how to use contexts in order to specify the way you want your formatters and linters to run Learn how to edit your configuration file via command line","title":"Quick Start"},{"location":"tutorials/quick_start/#quick-start","text":"","title":"Quick Start"},{"location":"tutorials/quick_start/#installation","text":"In order to install Statue , simply run: pip install statue You can validate statue has been installed successfully by running: statue --version Which will print: statue, version 0.0.19","title":"Installation"},{"location":"tutorials/quick_start/#initialize-statue","text":"In order for Statue to work correctly, you need to initialize Statue 's configuration file. This is simply done by going to your project's root directory and using the command: statue config init -i This command will create statue.toml file with the relevant configurations. Just follow the instructions, and your Statue configuration file will be ready! Note The flag -i flag is important. It will make Statue install all commands added in the configuration. You can see which commands have been set in your configuration using the command: statue config show-tree If you want to look at your configuration file as plain text, you can alternatively use: statue config show Note When using statue config init , Statue will ask you to specify for each source which contexts , allowed commands and denied commands to apply to that source. If you are not sure how to respond, skip by pressing enter. You'll always be able to edit your configuration later.","title":"Initialize Statue"},{"location":"tutorials/quick_start/#run","text":"Now that your configuration file is ready, simply run: statue run And all the commands defined in the configuration will run on your codebase. Note When running statue run , Statue creates a cache directory named .statue which is saved in your project's root directory. If you're using git as your VCS tool we highly recommend that you add .statue to your .gitignore file.","title":"Run!"},{"location":"tutorials/quick_start/#fixate-your-versions","text":"We highly recommend fixing your commands versions in the configuration. This will make sure every developer working on your project uses the same command versions. You can do so by running: statue config fix-versions If you want to fix the versions of your commands to their latest available version, simply run: statue config fix-versions --latest","title":"Fixate Your Versions"},{"location":"tutorials/quick_start/#whats-next","text":"Learn how to use statue run in various ways to improve efficiency Learn how to use contexts in order to specify the way you want your formatters and linters to run Learn how to edit your configuration file via command line","title":"What's Next?"},{"location":"tutorials/run_efficiently/","text":"Run Efficiently Starting Simple The simplest way you can run Statue is to use the following command: statue run This will run all available commands from your configuration on your codebase. Running this command will result in two ways: If the run finished successfully, the following will be printed: Statue finished successfully after 24.66 seconds! Otherwise, all the failing commands will be printed with the respective source they ran on. For example: src\\statue: black, pydocstyle, pylint tests: black, flake8 If you scroll up your terminal you'll see the output of each command, including those who failed. Now you can fix the errors and rerun statue run . Know Your History By running: statue history list You can see your latest run history. By default, Statue will save the last 30 runs. The history output will look like this: 1) 05/12/2022, 09:00:23 - Success (16/16 successful, 20.00 seconds) 2) 05/12/2022, 08:59:55 - Failure (14/16 successful, 20.24 seconds) 3) 05/12/2022, 08:54:53 - Success (16/16 successful, 24.66 seconds) 4) 05/11/2022, 15:43:30 - Success (16/16 successful, 40.94 seconds) 5) 05/11/2022, 15:42:58 - Success (3/3 successful, 24.73 seconds) 6) 05/11/2022, 15:38:52 - Failure (13/16 successful, 19.74 seconds) 7) 05/11/2022, 15:38:26 - Success (9/9 successful, 2.30 seconds) In order to see the exact commands that ran in a given evaluation, use the statue history show command. For example, if you want to take a look at evaluation 6 above, you can run: statue history show -n 6 And an output like the following will be printed: 05/11/2022, 15:38:52 - Failure (13/16 successful, 19.74 seconds) setup.py (1.08 seconds): black - Success (0.26 seconds) flake8 - Success (0.35 seconds) isort - Success (0.46 seconds) src\\statue (15.58 seconds): bandit - Success (1.47 seconds) black - Success (0.25 seconds) darglint - Failure (1.49 seconds) flake8 - Failure (1.18 seconds) isort - Success (0.28 seconds) mypy - Success (0.67 seconds) pydocstyle - Success (0.87 seconds) pylint - Failure (9.35 seconds) tests (19.72 seconds): black - Success (0.39 seconds) flake8 - Success (2.80 seconds) isort - Success (0.40 seconds) mypy - Success (0.90 seconds) pylint - Success (15.21 seconds) Do it again! After running Statue multiple times with multiple contexts, you might want to re-run the last failing evaluation. You can do so by running: statue run -f This command will search for the last failing evaluation (evaluation 2 in the example above) and re-run it. Pay attention that using -f flag will re-run the entire evaluation, including commands that finished successfully. If you want to only run the failed commands from the last failed evaluation, run: statue run -fo If you want to re-run a specific evaluation from history, You can do so by using the -p flag. For example, if you want to re-run evaluation 6 from before, you can do so by running: statue run -p 6 If you want to re-run only the failed commands from evaluation 6, run: statue run -p 6 -f Or: statue run -p 6 -fo What's Next? Learn how to use contexts in order to specify the way you want your commands to run. Learn how to add new commands and edit existing ones in your configuration using only the command line. Learn some advanced usage of statue run .","title":"Run Efficiently"},{"location":"tutorials/run_efficiently/#run-efficiently","text":"","title":"Run Efficiently"},{"location":"tutorials/run_efficiently/#starting-simple","text":"The simplest way you can run Statue is to use the following command: statue run This will run all available commands from your configuration on your codebase. Running this command will result in two ways: If the run finished successfully, the following will be printed: Statue finished successfully after 24.66 seconds! Otherwise, all the failing commands will be printed with the respective source they ran on. For example: src\\statue: black, pydocstyle, pylint tests: black, flake8 If you scroll up your terminal you'll see the output of each command, including those who failed. Now you can fix the errors and rerun statue run .","title":"Starting Simple"},{"location":"tutorials/run_efficiently/#know-your-history","text":"By running: statue history list You can see your latest run history. By default, Statue will save the last 30 runs. The history output will look like this: 1) 05/12/2022, 09:00:23 - Success (16/16 successful, 20.00 seconds) 2) 05/12/2022, 08:59:55 - Failure (14/16 successful, 20.24 seconds) 3) 05/12/2022, 08:54:53 - Success (16/16 successful, 24.66 seconds) 4) 05/11/2022, 15:43:30 - Success (16/16 successful, 40.94 seconds) 5) 05/11/2022, 15:42:58 - Success (3/3 successful, 24.73 seconds) 6) 05/11/2022, 15:38:52 - Failure (13/16 successful, 19.74 seconds) 7) 05/11/2022, 15:38:26 - Success (9/9 successful, 2.30 seconds) In order to see the exact commands that ran in a given evaluation, use the statue history show command. For example, if you want to take a look at evaluation 6 above, you can run: statue history show -n 6 And an output like the following will be printed: 05/11/2022, 15:38:52 - Failure (13/16 successful, 19.74 seconds) setup.py (1.08 seconds): black - Success (0.26 seconds) flake8 - Success (0.35 seconds) isort - Success (0.46 seconds) src\\statue (15.58 seconds): bandit - Success (1.47 seconds) black - Success (0.25 seconds) darglint - Failure (1.49 seconds) flake8 - Failure (1.18 seconds) isort - Success (0.28 seconds) mypy - Success (0.67 seconds) pydocstyle - Success (0.87 seconds) pylint - Failure (9.35 seconds) tests (19.72 seconds): black - Success (0.39 seconds) flake8 - Success (2.80 seconds) isort - Success (0.40 seconds) mypy - Success (0.90 seconds) pylint - Success (15.21 seconds)","title":"Know Your History"},{"location":"tutorials/run_efficiently/#do-it-again","text":"After running Statue multiple times with multiple contexts, you might want to re-run the last failing evaluation. You can do so by running: statue run -f This command will search for the last failing evaluation (evaluation 2 in the example above) and re-run it. Pay attention that using -f flag will re-run the entire evaluation, including commands that finished successfully. If you want to only run the failed commands from the last failed evaluation, run: statue run -fo If you want to re-run a specific evaluation from history, You can do so by using the -p flag. For example, if you want to re-run evaluation 6 from before, you can do so by running: statue run -p 6 If you want to re-run only the failed commands from evaluation 6, run: statue run -p 6 -f Or: statue run -p 6 -fo","title":"Do it again!"},{"location":"tutorials/run_efficiently/#whats-next","text":"Learn how to use contexts in order to specify the way you want your commands to run. Learn how to add new commands and edit existing ones in your configuration using only the command line. Learn some advanced usage of statue run .","title":"What's Next?"}]}